// Generates CPUID results given input from http://instlatx64.atw.hu/

#include <cstdint>
#include <regex>
#include <sstream>
#include <string>
#include <unordered_map>

std::string g_input = R"(

CPUID 00000000: 00000016-756E6547-6C65746E-49656E69 [GenuineIntel]
CPUID 00000001: 00050654-00100800-7FFEFBBF-BFEBFBFF
CPUID 00000002: 76036301-00F0B5FF-00000000-00C30000
CPUID 00000003: 00000000-00000000-00000000-00000000
CPUID 00000004: 1C004121-01C0003F-0000003F-00000000 [SL 00] [L1D: 32 KB]
CPUID 00000004: 1C004122-01C0003F-0000003F-00000000 [SL 01] [L1I: 32 KB]
CPUID 00000004: 1C004143-03C0003F-000003FF-00000000 [SL 02] [L2U: 1 MB]
CPUID 00000004: 1C03C163-0280003F-00002FFF-00000004 [SL 03] [L3U: 8448 KB]
CPUID 00000005: 00000040-00000040-00000003-00002020
CPUID 00000006: 00000EF7-00000002-00000009-00000000
CPUID 00000007: 00000000-D39FFFFB-00000000-9C002400
CPUID 00000008: 00000000-00000000-00000000-00000000
CPUID 00000009: 00000000-00000000-00000000-00000000
CPUID 0000000A: 07300404-00000000-00000000-00000603
CPUID 0000000B: 00000001-00000002-00000100-00000000 [SL 00]
CPUID 0000000B: 00000004-0000000C-00000201-00000000 [SL 01]
CPUID 0000000C: 00000000-00000000-00000000-00000000
CPUID 0000000D: 000000FF-00000A80-00000A80-00000000 [SL 00] [x87]
CPUID 0000000D: 0000000F-00000A80-00000100-00000000 [SL 01] [SSE]
CPUID 0000000D: 00000100-00000240-00000000-00000000 [SL 02] [AVX]
CPUID 0000000D: 00000040-000003C0-00000000-00000000 [SL 03] [MPX BNDREGS]
CPUID 0000000D: 00000040-00000400-00000000-00000000 [SL 04] [MPX BNDCSR]
CPUID 0000000D: 00000040-00000440-00000000-00000000 [SL 05] [AVX-512 Opmask]
CPUID 0000000D: 00000200-00000480-00000000-00000000 [SL 06] [AVX-512 Hi256]
CPUID 0000000D: 00000400-00000680-00000000-00000000 [SL 07] [AVX-512 Hi16]
CPUID 0000000D: 00000080-00000000-00000001-00000000 [SL 08] [PT]
CPUID 0000000E: 00000000-00000000-00000000-00000000
CPUID 0000000F: 00000000-0000002F-00000000-00000002 [SL 00]
CPUID 0000000F: 00000000-00006000-0000002F-00000007 [SL 01]
CPUID 00000010: 00000000-0000000A-00000000-00000000 [SL 00]
CPUID 00000010: 0000000A-00000600-00000004-0000000F [SL 01]
CPUID 00000011: 00000000-00000000-00000000-00000000
CPUID 00000012: 00000000-00000000-00000000-00000000 [SL 00]
CPUID 00000012: 00000000-00000000-00000000-00000000 [SL 01]
CPUID 00000013: 00000000-00000000-00000000-00000000
CPUID 00000014: 00000001-0000000F-00000007-00000000 [SL 00]
CPUID 00000014: 02490002-003F3FFF-00000000-00000000 [SL 01]
CPUID 00000015: 00000002-00000124-00000000-00000000 [146.00x / 0]
CPUID 00000016: 00000DAC-00000FA0-00000064-00000000 [3500 / 4000 / 100]
CPUID 80000000: 80000008-00000000-00000000-00000000
CPUID 80000001: 00000000-00000000-00000121-2C100000
CPUID 80000002: 65746E49-2952286C-726F4320-4D542865 [Intel(R) Core(TM]
CPUID 80000003: 37692029-3038372D-43205830-40205550 [) i7-7800X CPU @]
CPUID 80000004: 352E3320-7A484730-00000000-00000000 [ 3.50GHz]
CPUID 80000005: 00000000-00000000-00000000-00000000 [L1D: 0 KB / L1I: 0 KB]
CPUID 80000006: 00000000-00000000-01006040-00000000 [L2: 256 KB] / L3: 0 KB]
CPUID 80000007: 00000000-00000000-00000000-00000100
CPUID 80000008: 0000302E-00000000-00000000-00000000
)";

int main(int argc, char* argv[]) {
    std::stringstream input(g_input);

    std::unordered_map<int, int> leaf_count;
    std::string line;
    struct cpuid {
        int leaf;
        int subleaf;
        uint32_t eax;
        uint32_t ebx;
        uint32_t ecx;
        uint32_t edx;
    };
    std::vector<cpuid> cpuids;
    while (std::getline(input, line)) {
        if (line.empty()) {
            continue;
        }

        if (line.find("CPUID") == std::string::npos) {
            continue;
        }

        std::regex re("CPUID ([0-9A-F]+): ([0-9A-F]+)-([0-9A-F]+)-([0-9A-F]+)-([0-9A-F]+)");
        std::smatch match;
        if (std::regex_search(line, match, re)) {
            int leaf = std::stol(match[1].str(), nullptr, 16);
            int subleaf = leaf_count[leaf]++;
            printf("match[5] = %s\n", match[5].str().c_str());
            uint32_t eax = std::stol(match[2].str(), nullptr, 16);
            uint32_t ebx = std::stol(match[3].str(), nullptr, 16);
            uint32_t ecx = std::stol(match[4].str(), nullptr, 16);
            uint32_t edx = std::stol(match[5].str(), nullptr, 16);
            cpuids.push_back({leaf, subleaf, eax, ebx, ecx, edx});
        }
    }

    for (auto& cpuid : cpuids) {
        if (leaf_count[cpuid.leaf] == 1) {
            printf("{0x%08x, NO_SUBLEAF, 0x%08X, 0x%08X, 0x%08X, 0x%08X},\n", cpuid.leaf, cpuid.eax, cpuid.ebx, cpuid.ecx, cpuid.edx);
        } else {
            printf("{0x%08x, 0x%08x, 0x%08X, 0x%08X, 0x%08X, 0x%08X},\n", cpuid.leaf, cpuid.subleaf, cpuid.eax, cpuid.ebx, cpuid.ecx, cpuid.edx);
        }
    }
}