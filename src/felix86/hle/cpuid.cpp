#include "felix86/common/log.hpp"
#include "felix86/common/x86.hpp"
#include "felix86/frontend/instruction.hpp"
#include "felix86/hle/cpuid.hpp"

const char* manufacturer_id = "GenuineIntel";

// We emulate a Nehalem processor, which is right before AVX was introduced
// http://users.atw.hu/instlatx64/GenuineIntel/GenuineIntel00106A2_Nehalem-EP_CPUID.txt

struct Cpuid {
    u32 leaf;
    u32 subleaf;
    u32 eax;
    u32 ebx;
    u32 ecx;
    u32 edx;
};

constexpr u32 NO_SUBLEAF = 0xFFFFFFFF;

// Generated using generate_cpuid.cpp
constexpr Cpuid mappings[] = {
    {0x00000000, NO_SUBLEAF, 0x00000023, 0x756E6547, 0x6C65746E, 0x49656E69},
    {0x00000001, NO_SUBLEAF, 0x000A06A4, 0x20800800, 0x7FFAFBFF, 0xBFEBFBFF},
    {0x00000002, NO_SUBLEAF, 0x00FEFF01, 0x000000F0, 0x00000000, 0x00000000},
    {0x00000003, NO_SUBLEAF, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000004, 0x00000000, 0xFC004121, 0x02C0003F, 0x0000003F, 0x00000000},
    {0x00000004, 0x00000001, 0xFC004122, 0x03C0003F, 0x0000003F, 0x00000000},
    {0x00000004, 0x00000002, 0xFC01C143, 0x03C0003F, 0x000007FF, 0x00000000},
    {0x00000004, 0x00000003, 0xFC0FC163, 0x02C0003F, 0x00007FFF, 0x00000004},
    {0x00000005, NO_SUBLEAF, 0x00000040, 0x00000040, 0x00000003, 0x11112020},
    {0x00000006, NO_SUBLEAF, 0x00DFCFF7, 0x00000002, 0x00000409, 0x00040003},
    {0x00000007, 0x00000000, 0x00000002, 0x239C27EB, 0x994007AC, 0xFC18C410},
    {0x00000007, 0x00000001, 0x40400910, 0x00000001, 0x00000000, 0x00040000},
    {0x00000007, 0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x0000003F},
    {0x00000008, NO_SUBLEAF, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000009, NO_SUBLEAF, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x0000000a, NO_SUBLEAF, 0x07300805, 0x00000000, 0x00000007, 0x00008603},
    {0x0000000b, 0x00000000, 0x00000001, 0x00000002, 0x00000100, 0x00000020},
    {0x0000000b, 0x00000001, 0x00000007, 0x00000016, 0x00000201, 0x00000020},
    {0x0000000c, NO_SUBLEAF, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x0000000d, 0x00000000, 0x00000207, 0x00000340, 0x00000A88, 0x00000000},
    {0x0000000d, 0x00000001, 0x0000000F, 0x000003D0, 0x00019900, 0x00000000},
    {0x0000000d, 0x00000002, 0x00000100, 0x00000240, 0x00000000, 0x00000000},
    {0x0000000d, 0x00000003, 0x00000080, 0x00000000, 0x00000001, 0x00000000},
    {0x0000000d, 0x00000004, 0x00000008, 0x00000A80, 0x00000000, 0x00000000},
    {0x0000000d, 0x00000005, 0x00000010, 0x00000000, 0x00000001, 0x00000000},
    {0x0000000d, 0x00000006, 0x00000018, 0x00000000, 0x00000001, 0x00000000},
    {0x0000000d, 0x00000007, 0x00000328, 0x00000000, 0x00000001, 0x00000000},
    {0x0000000d, 0x00000008, 0x00000008, 0x00000000, 0x00000001, 0x00000000},
    {0x0000000e, NO_SUBLEAF, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x0000000f, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x0000000f, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000010, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000010, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000011, NO_SUBLEAF, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000012, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000012, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000013, NO_SUBLEAF, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000014, 0x00000000, 0x00000001, 0x0000005F, 0x00000007, 0x00000000},
    {0x00000014, 0x00000001, 0x02490002, 0x003F003F, 0x00000000, 0x00000000},
    {0x00000015, NO_SUBLEAF, 0x00000002, 0x0000009C, 0x0249F000, 0x00000000},
    {0x00000016, NO_SUBLEAF, 0x00000BB8, 0x000012C0, 0x00000064, 0x00000000},
    {0x00000017, NO_SUBLEAF, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000018, 0x00000000, 0x00000008, 0x00000000, 0x00000000, 0x00000000},
    {0x00000018, 0x00000001, 0x00000000, 0x00080001, 0x00000020, 0x00004022},
    {0x00000018, 0x00000002, 0x00000000, 0x00080006, 0x00000004, 0x00004022},
    {0x00000018, 0x00000003, 0x00000000, 0x0010000F, 0x00000001, 0x00004125},
    {0x00000018, 0x00000004, 0x00000000, 0x00060001, 0x00000010, 0x00004024},
    {0x00000018, 0x00000005, 0x00000000, 0x00040006, 0x00000008, 0x00004024},
    {0x00000018, 0x00000006, 0x00000000, 0x00080008, 0x00000001, 0x00004124},
    {0x00000018, 0x00000007, 0x00000000, 0x00080007, 0x00000080, 0x00004043},
    {0x00000018, 0x00000008, 0x00000000, 0x00080009, 0x00000080, 0x00004043},
    {0x00000019, NO_SUBLEAF, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x0000001a, NO_SUBLEAF, 0x40000002, 0x00000000, 0x00000000, 0x00000000},
    {0x0000001c, NO_SUBLEAF, 0x4000000B, 0x00000007, 0x00000007, 0x00000000},
    {0x0000001d, NO_SUBLEAF, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x0000001e, NO_SUBLEAF, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x0000001f, 0x00000000, 0x00000001, 0x00000002, 0x00000100, 0x00000020},
    {0x0000001f, 0x00000001, 0x00000003, 0x00000002, 0x00000201, 0x00000020},
    {0x0000001f, 0x00000002, 0x00000007, 0x00000016, 0x00000302, 0x00000020},
    {0x00000020, NO_SUBLEAF, 0x00000000, 0x00000001, 0x00000000, 0x00000000},
    {0x00000021, NO_SUBLEAF, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000022, NO_SUBLEAF, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000023, 0x00000000, 0x0000000B, 0x00000000, 0x00000000, 0x00000000},
    {0x00000023, 0x00000001, 0x000000FF, 0x0000000F, 0x00000000, 0x00000000},
    {0x00000023, 0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000023, 0x00000003, 0x00000DFF, 0x00000000, 0x00000000, 0x00000000},
    {0x00000023, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000023, 0x00000005, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000023, 0x00000006, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000023, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000023, 0x00000008, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000023, 0x00000009, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000023, 0x0000000a, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x00000023, 0x0000000b, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x80000000, NO_SUBLEAF, 0x80000008, 0x00000000, 0x00000000, 0x00000000},
    {0x80000001, NO_SUBLEAF, 0x00000000, 0x00000000, 0x00000121, 0x2C100000},
    {0x80000002, NO_SUBLEAF, 0x65746E49, 0x2952286C, 0x726F4320, 0x4D542865},
    {0x80000003, NO_SUBLEAF, 0x6C552029, 0x20617274, 0x35312037, 0x00004835},
    {0x80000004, NO_SUBLEAF, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x80000005, NO_SUBLEAF, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
    {0x80000006, NO_SUBLEAF, 0x00000000, 0x00000000, 0x08007040, 0x00000000},
    {0x80000007, NO_SUBLEAF, 0x00000000, 0x00000000, 0x00000000, 0x00000100},
    {0x80000008, NO_SUBLEAF, 0x0000302E, 0x00000000, 0x00000000, 0x00000000},
};

void felix86_cpuid(ThreadState* thread_state) {
    u32 eax = 0;
    u32 ebx = 0;
    u32 ecx = 0;
    u32 edx = 0;
    u32 leaf = thread_state->GetGpr(X86_REF_RAX);
    u32 subleaf = thread_state->GetGpr(X86_REF_RCX);
    bool found = false;

    for (const Cpuid& cpuid : mappings) {
        if (cpuid.leaf == leaf && (cpuid.subleaf == subleaf || cpuid.subleaf == NO_SUBLEAF)) {
            eax = cpuid.eax;
            ebx = cpuid.ebx;
            ecx = cpuid.ecx;
            edx = cpuid.edx;
            found = true;
            break;
        }
    }

    if (!found) {
        WARN("Unknown CPUID(%08x, %08x)", leaf, subleaf);
    }

    STRACE("CPUID(%08x, %08x) -> %08x %08x %08x %08x", leaf, subleaf, eax, ebx, ecx, edx);
    thread_state->SetGpr(X86_REF_RAX, eax);
    thread_state->SetGpr(X86_REF_RBX, ebx);
    thread_state->SetGpr(X86_REF_RCX, ecx);
    thread_state->SetGpr(X86_REF_RDX, edx);
}